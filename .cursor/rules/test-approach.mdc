---
description: Step-by-step approach for writing tests using AI assistance
---

# AI-Assisted Test Writing Approach

## For Standard Unit Tests

### Step 1: Create the Test File
Decide which node you want to test and create a test file with the corresponding name in the test folder.

Example: For a node in `nodes/NodeA/NodeA.node.ts`, create `nodes/NodeA/test/NodeA.node.test.ts`

### Step 2: Use AI Assistance
Send this prompt to your AI tool (Cursor, Copilot, Claude, etc.):

```
Using guidelines in @TESTING_PROMPT.md, write tests for @NodeA.node.ts in @NodeA.node.test.ts
```

**Important**: Make sure file names after `@` are detected and referenced by your tool.

You can improve the prompt by asking to cover specific test cases:
- "Focus on error handling scenarios"
- "Test all operations for the 'user' resource"
- "Include binary data handling tests"

### Step 3: Review and Refine
Thoroughly review the generated tests:
- ✅ Verify tests run successfully
- ✅ Remove redundant or duplicate tests
- ✅ Check mock implementations are correct
- ✅ Ensure proper error handling coverage
- ✅ Validate assertions match expected behavior

**Remember**: Even if generated by AI, it's still your responsibility to ensure tests are working and reasonable.

## For Workflow Unit Tests

Workflow tests use predefined workflows in JSON format with NodeTestHarness. This is closer to integration testing.

### Step 1: Create Test Files
Create both:
1. Test file: `nodes/NodeA/test/NodeA.node.test.ts`
2. Workflow files: `nodes/NodeA/test/*.workflow.json`

### Step 2: Use AI with Credentials Schema
Use a more specific prompt that includes credential schema:

```
I need you to write workflow unit tests for @NodeA.node.ts in @NodeA.node.test.ts
using guidelines in @TESTING_PROMPT_WORKFLOW.md

You should test each resource and operation in the node.
After writing a first test make sure it passes, then write other tests.

To mock credentials use this schema:
{
  yandexCloudStatic: {
    accessKeyId: 'test-key',
    secretAccessKey: 'test-secret',
  }
}
```

**Why specify credentials?** AI struggles with identifying the correct credential schema, so providing it upfront prevents issues.

### Step 3: Iterative Testing
1. Write first workflow test
2. Run and verify it passes: `npm test -- NodeA.node.test.ts`
3. Write additional tests for other operations
4. Repeat until all operations are covered

### Step 4: Review Workflow Tests
- ✅ Verify all API endpoints are mocked with nock
- ✅ Check pinData matches expected outputs
- ✅ Ensure credentials are properly configured
- ✅ Validate node connections are correct
- ✅ Test error scenarios with appropriate mocks

## Testing Checklist

### Unit Tests Should Cover
- [ ] Node definition and properties
- [ ] All operations for each resource
- [ ] Success paths with valid inputs
- [ ] Error handling with continueOnFail
- [ ] Edge cases (empty data, null values)
- [ ] Parameter validation
- [ ] Multiple input items processing
- [ ] Binary data operations (if applicable)

### Workflow Tests Should Cover
- [ ] Each resource and operation combination
- [ ] Complete workflow execution
- [ ] API integration with proper mocking
- [ ] Authentication flows
- [ ] Error scenarios
- [ ] Binary data handling (if applicable)

## Running Tests

```bash
# Run all tests
npm test

# Run specific test file
npm test -- NodeA.node.test.ts

# Run with coverage
npm test:coverage

# Watch mode for development
npm test:watch
```

## Common Issues and Solutions

### Issue: Tests fail with "Cannot find module"
**Solution**: Run `npm install` and rebuild: `npm run build`

### Issue: Mocks not working
**Solution**: Ensure `jest.mock()` is at the top of the test file before any imports

### Issue: Workflow test returns null
**Solution**: Check credential configuration - usually misconfigured credentials

### Issue: Nock not intercepting requests
**Solution**: Verify mock URL and path match exactly what the node calls

## Best Practices

1. **Start Simple**: Write basic happy path test first
2. **Test Iteratively**: One test at a time, verify it passes
3. **Mock Everything**: No real API calls, no real credentials
4. **Use Realistic Data**: Test data should mirror production scenarios
5. **Document Complex Scenarios**: Add comments for non-obvious test cases
6. **Keep Tests Independent**: Each test should run in isolation
7. **Clean Up**: Use afterEach hooks to reset mocks

## Additional Resources
- [TESTING_PROMPT.md](mdc:docs/TESTING_PROMPT.md) - Detailed unit test guidelines
- [TESTING_PROMPT_WORKFLOW.md](mdc:docs/TESTING_PROMPT_WORKFLOW.md) - Workflow test guidelines
- [TESTING.md](mdc:docs/TESTING.md) - Quick reference guide
