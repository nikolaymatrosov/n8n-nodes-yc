---
globs: *.workflow.json,**/__tests__/**/*.workflow.json,**/test/**/*.workflow.json
description: Guidelines for writing workflow-based integration tests using NodeTestHarness
---

# Workflow Testing Guidelines

## Overview
Workflow tests use `.workflow.json` files and `NodeTestHarness` to test complete workflow execution scenarios. This is closer to integration testing.

## Basic Workflow Test Structure

```typescript
import { NodeTestHarness } from '@nodes-testing/node-test-harness';
import nock from 'nock';

describe('NodeName Workflow Tests', () => {
  const credentials = {
    nodeApi: {
      accessToken: 'test-token',
      baseUrl: 'https://api.example.com',
    },
  };

  describe('Operation Tests', () => {
    beforeAll(() => {
      const mock = nock(credentials.nodeApi.baseUrl);
      mock.post('/endpoint').reply(200, mockResponse);
    });

    new NodeTestHarness().setupTests({
      credentials,
      workflowFiles: ['operation.workflow.json'],
    });
  });
});
```

## Workflow JSON Structure

### Minimum Required Structure
```json
{
  "name": "NodeName Test Workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [0, 0],
      "id": "trigger-id",
      "name": "When clicking 'Execute Workflow'"
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "user"
      },
      "type": "n8n-nodes-base.nodeName",
      "typeVersion": 1,
      "position": [200, 0],
      "id": "node-id",
      "name": "Node Operation",
      "credentials": {
        "nodeApi": {
          "id": "credential-id",
          "name": "Test Credentials"
        }
      }
    }
  ],
  "pinData": {
    "Node Operation": [
      {
        "json": {
          "id": "123",
          "status": "success"
        }
      }
    ]
  },
  "connections": {
    "When clicking 'Execute Workflow'": {
      "main": [[{
        "node": "Node Operation",
        "type": "main",
        "index": 0
      }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}
```

## Key Workflow Components

### 1. Trigger Node (Required)
Always start with `n8n-nodes-base.manualTrigger`

### 2. Test Node
Include all required parameters with realistic values

### 3. Pin Data (Required)
Provide expected outputs for validation - **don't skip this**

### 4. Connections
Define clear data flow between nodes

### 5. Credentials
Reference appropriate credential types

## Common Credential Schemas

### OAuth2
```typescript
const credentials = {
  oauth2: {
    scope: '',
    oauthTokenData: {
      access_token: 'ACCESSTOKEN',
    },
  }
};
```

### AWS
```typescript
const credentials = {
  aws: {
    region: 'eu-central-1',
    accessKeyId: 'test',
    secretAccessKey: 'test',
  },
};
```

### API Key
```typescript
const credentials = {
  nodeApi: {
    accessToken: 'test-token',
    baseUrl: 'https://api.example.com',
  },
};
```

### Static Credentials (Yandex Cloud)
```typescript
const credentials = {
  yandexCloudStatic: {
    accessKeyId: 'test-key',
    secretAccessKey: 'test-secret',
  },
};
```

## HTTP Mocking for Workflows

### Basic Mocking
```typescript
beforeAll(() => {
  const mock = nock('https://api.example.com');

  mock.get('/users').reply(200, { users: [] });
  mock.post('/users').reply(201, { id: '123' });
  mock.get('/error').reply(500, { error: 'Server Error' });
});
```

### Advanced Mocking
```typescript
beforeAll(() => {
  const mock = nock('https://api.example.com');

  // With headers
  mock.get('/protected')
    .matchHeader('Authorization', 'Bearer test-token')
    .reply(200, { data: 'protected' });

  // With query parameters
  mock.get('/search')
    .query({ q: 'test', limit: 10 })
    .reply(200, { results: [] });
});
```

## Binary Data Testing

```typescript
new NodeTestHarness().setupTests({
  credentials,
  workflowFiles: ['binary.workflow.json'],
  assertBinaryData: true  // Enable binary data assertions
});
```

## Testing Strategy

### Test Each Resource and Operation
Write separate workflow tests for:
- Each resource (e.g., user, file, stream)
- Each operation (e.g., create, read, update, delete)
- Error scenarios
- Binary data operations (if applicable)

### Iterative Testing
1. Write first test
2. Make sure it passes
3. Write additional tests

### Troubleshooting
If execution result is null:
- Check credential configuration
- Verify all required parameters are set
- Ensure mock endpoints match workflow requests
- Check node parameter names match node definition

## Essential Guidelines
- **Mock all external API calls** - no real network requests
- **Don't skip pinData** - essential for output validation
- **Test both success and error scenarios**
- **Use realistic response data**
- **Clean up mocks** between test runs

## Anti-Patterns to Avoid
1. Don't use real external APIs
2. Don't skip pinData in workflows
3. Don't forget to mock all API calls
4. Don't use hardcoded credentials
5. Don't ignore error scenarios
6. Don't create overly complex workflows
7. Don't use production data

See [TESTING_PROMPT_WORKFLOW.md](mdc:docs/TESTING_PROMPT_WORKFLOW.md) for detailed workflow test guidelines.
